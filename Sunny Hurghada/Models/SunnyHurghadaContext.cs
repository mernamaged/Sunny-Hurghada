// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Sunny_Hurghada.Models;

public partial class SunnyHurghadaContext : DbContext
{
    public SunnyHurghadaContext(DbContextOptions<SunnyHurghadaContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ContactU> ContactUs { get; set; }

    public virtual DbSet<Destination> Destinations { get; set; }

    public virtual DbSet<GuestEmail> GuestEmails { get; set; }

    public virtual DbSet<Language> Languages { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<Spot> Spots { get; set; }

    public virtual DbSet<SpotBooking> SpotBookings { get; set; }

    public virtual DbSet<SpotImage> SpotImages { get; set; }

    public virtual DbSet<SpotLocalized> SpotLocalizeds { get; set; }

    public virtual DbSet<TourType> TourTypes { get; set; }

    public virtual DbSet<TourTypeLocalized> TourTypeLocalizeds { get; set; }

    public virtual DbSet<TransferBooking> TransferBookings { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ContactU>(entity =>
        {
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Message)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Subject)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Destination>(entity =>
        {
            entity.ToTable("Destination");

            entity.Property(e => e.Img)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GuestEmail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_GuestEmail_1");

            entity.ToTable("GuestEmail");

            entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Language>(entity =>
        {
            entity.ToTable("Language");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.ToTable("Payment");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<Spot>(entity =>
        {
            entity.ToTable("Spot");

            entity.Property(e => e.AdultPrice).HasColumnType("decimal(7, 2)");
            entity.Property(e => e.ChildPrice).HasColumnType("decimal(7, 2)");
            entity.Property(e => e.Duration)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Destination).WithMany(p => p.Spots)
                .HasForeignKey(d => d.DestinationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Spot_Destination");

            entity.HasOne(d => d.TourType).WithMany(p => p.Spots)
                .HasForeignKey(d => d.TourTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Spot_TourType");
        });

        modelBuilder.Entity<SpotBooking>(entity =>
        {
            entity.ToTable("SpotBooking");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Nationality)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SpecialRequest).HasMaxLength(255);
            entity.Property(e => e.TripDate).HasColumnType("smalldatetime");

            entity.HasOne(d => d.Payment).WithMany(p => p.SpotBookings)
                .HasForeignKey(d => d.PaymentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SpotBooking_Payment");

            entity.HasOne(d => d.Spot).WithMany(p => p.SpotBookings)
                .HasForeignKey(d => d.SpotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SpotBooking_Spot");
        });

        modelBuilder.Entity<SpotImage>(entity =>
        {
            entity.ToTable("SpotImage");

            entity.Property(e => e.ImgUrl)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Spot).WithMany(p => p.SpotImages)
                .HasForeignKey(d => d.SpotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SpotImage_Spot");
        });

        modelBuilder.Entity<SpotLocalized>(entity =>
        {
            entity.HasKey(e => new { e.LanguageId, e.SpotId });

            entity.ToTable("SpotLocalized");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Excludes)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Includes)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.WhatToBring)
                .IsRequired()
                .HasMaxLength(500);

            entity.HasOne(d => d.Language).WithMany(p => p.SpotLocalizeds)
                .HasForeignKey(d => d.LanguageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SpotLocalized_Language");

            entity.HasOne(d => d.Spot).WithMany(p => p.SpotLocalizeds)
                .HasForeignKey(d => d.SpotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SpotLocalized_Spot");
        });

        modelBuilder.Entity<TourType>(entity =>
        {
            entity.ToTable("TourType");

            entity.Property(e => e.Img)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TourTypeLocalized>(entity =>
        {
            entity.HasKey(e => new { e.LanguageId, e.TourTypeId });

            entity.ToTable("TourTypeLocalized");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Language).WithMany(p => p.TourTypeLocalizeds)
                .HasForeignKey(d => d.LanguageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TourTypeLocalized_Language");

            entity.HasOne(d => d.TourType).WithMany(p => p.TourTypeLocalizeds)
                .HasForeignKey(d => d.TourTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TourTypeLocalized_TourType");
        });

        modelBuilder.Entity<TransferBooking>(entity =>
        {
            entity.ToTable("TransferBooking");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Destination)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PickUpLocation)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.SpecialRequest).HasMaxLength(255);

            entity.HasOne(d => d.Payment).WithMany(p => p.TransferBookings)
                .HasForeignKey(d => d.PaymentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TransferBooking_Payment");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}